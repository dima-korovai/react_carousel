{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","state","imagesAmount","props","images","length","itemWidth","movedDistance","gap","step","frameSize","animationDuration","infinite","handleImagesNext","setState","handleImagesPrev","this","listStyle","transform","transition","className","style","width","map","image","index","marginRight","src","alt","disabled","type","onClick","value","min","max","onChange","e","target","React","Component","App","frame","moveSpeed","ReactDOM","render","document","getElementById"],"mappings":"iOAuBMA,E,4MACJC,MAAQ,CACNC,aAAc,EAAKC,MAAMC,OAAOC,OAChCC,UAAW,EAAKH,MAAMG,UACtBC,cAAe,EACfC,IAAK,EACLC,KAAM,EAAKN,MAAMM,KACjBC,UAAW,EAAKP,MAAMO,UACtBC,kBAAmB,EAAKR,MAAMQ,kBAC9BC,SAAU,EAAKT,MAAMS,U,EAGvBC,iBAAmB,WACjB,MAOI,EAAKZ,MANPC,EADF,EACEA,aACAI,EAFF,EAEEA,UACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,IACAC,EALF,EAKEA,KAQF,IAJiB,IATjB,EAMEG,UAIA,EAAKE,SAAS,CAAEP,cAAe,IAG7BA,GAAkBL,EAAeO,IAASH,EAAYE,GAMxD,OAHoBN,GAAiBI,EAAYE,IAFxBD,GACpBD,EAAYE,GAAOC,IAKtB,KAAMH,EAAYE,EAChB,EAAKM,SACH,CAAEP,cAAeA,EAAgBD,EAAYE,IAE/C,MACF,KAAOF,EAAYE,IAAQC,EAAO,GAChC,EAAKK,SACH,CACEP,cAAeA,GAAiBD,EAAYE,IAAQC,EAAO,KAG/D,MACF,QACE,EAAKK,SACH,CACEP,cAAeA,GAAiBD,EAAYE,GAAOC,M,EAO/DM,iBAAmB,WACjB,MAOI,EAAKd,MANPC,EADF,EACEA,aACAI,EAFF,EAEEA,UACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,IACAC,EALF,EAKEA,KAWF,IAPiB,IATjB,EAMEG,UAIA,EAAKE,SAAS,CACZP,eAAgBL,EAAeO,IAC5BH,EAAYE,KAIfD,GAAkBD,EAAYE,EAMhC,OALyBD,GACtBD,EAAYE,GAAOC,GACiBH,EAAYE,GACjDC,GAGA,KAAKH,EAAYE,EACf,EAAKM,SAAS,CAAEP,cAAeA,EAAgBD,EAAYE,IAC3D,MACF,KAAOF,EAAYE,IAAQC,EAAO,GAChC,EAAKK,SACH,CACEP,cAAeA,GAAiBD,EAAYE,IAAQC,EAAO,KAG/D,MACF,QACE,EAAKK,SAAS,CACZP,cAAeA,GAAiBD,EAAYE,GAAOC,M,4CAM7D,WAAU,IAAD,OACCL,EAAWY,KAAKb,MAAhBC,OACR,EASIY,KAAKf,MARPC,EADF,EACEA,aACAI,EAFF,EAEEA,UACAC,EAHF,EAGEA,cACAC,EAJF,EAIEA,IACAC,EALF,EAKEA,KACAC,EANF,EAMEA,UACAC,EAPF,EAOEA,kBACAC,EARF,EAQEA,SAGIK,EAAY,CAChBC,UAAU,cAAD,QAAiBX,EAAjB,MACTY,WAAW,GAAD,OAAKR,EAAL,OAGZ,OACE,sBACES,UAAU,WACVC,MAAO,CAAEC,MAAM,GAAD,OAAKhB,EAAYI,EAAjB,OAFhB,UAIE,oBACEU,UAAU,iBACVC,MAAOJ,EAFT,SAIGb,EAAOmB,KAAI,SAACC,EAAOC,GAClB,OACE,oBACEL,UAAU,iBAEVC,MAAO,CAAEK,YAAY,GAAD,OAAKlB,EAAL,OAHtB,SAKE,qBACEmB,IAAKH,EACLI,IAAG,UAAKH,EAAQ,GAChBH,MAAK,UAAKhB,MANPkB,QAab,sBAAKJ,UAAU,oBAAf,UACE,wBACES,SAA4B,IAAlBtB,IAAoC,IAAbK,EACjCQ,UAAU,0CACVU,KAAK,SACLC,QAASf,KAAKD,iBAJhB,kBASA,wBACE,UAAQ,OACRc,SAAUtB,IAAmBL,EAAe,IACvCI,EAAYE,KAAsB,IAAbI,EAC1BQ,UAAU,0CACVU,KAAK,SACLC,QAASf,KAAKH,iBANhB,qBAYF,uBAAMO,UAAU,iBAAhB,UACE,wBAAOA,UAAU,wBAAjB,UACG,gBACD,uBACEA,UAAU,wBACVU,KAAK,SACLE,MAAOvB,EACPwB,IAAI,IACJC,IAAI,IACJzB,KAAK,IACL0B,SAAU,SAACC,GACT,EAAKtB,SAAS,CAAEL,MAAO2B,EAAEC,OAAOL,cAItC,wBAAOZ,UAAU,wBAAjB,UACG,eACD,uBACEA,UAAU,wBACVU,KAAK,SACLE,MAAOtB,EACPuB,IAAI,IACJC,IAAI,IACJzB,KAAK,IACL0B,SAAU,SAACC,GACT,EAAKtB,SAAS,CAAEJ,WAAY0B,EAAEC,OAAOL,cAI3C,wBAAOZ,UAAU,wBAAjB,UACG,eACD,uBACEA,UAAU,wBACVU,KAAK,SACLE,MAAO1B,EACP2B,IAAI,KACJC,IAAI,MACJzB,KAAK,KACL0B,SAAU,SAACC,GACT,EAAKtB,SAAS,CAAER,WAAY8B,EAAEC,OAAOL,cAI3C,wBAAOZ,UAAU,wBAAjB,UACG,iBACD,uBACEA,UAAU,wBACVU,KAAK,SACLE,MAAOrB,EACPsB,IAAI,MACJC,IAAI,OACJzB,KAAK,MACL0B,SAAU,SAACC,GACT,EAAKtB,SAAS,CAAEH,mBAAoByB,EAAEC,OAAOL,cAInD,wBAAOZ,UAAU,wBAAjB,UACG,aACD,uBACEA,UAAU,wBACVU,KAAK,WACLC,QAAS,YACU,IAAbnB,EACF,EAAKE,SAAS,CAAEF,UAAU,IAE1B,EAAKE,SAAS,CAAEF,UAAU,oB,GArOrB0B,IAAMC,WAiPdvC,IC1PTwC,E,4MACJvC,MAAQ,CACNG,OAAQ,CACN,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,cACA,gBAEFE,UAAW,IACXG,KAAM,EACNgC,MAAO,EACPC,UAAW,IACX9B,UAAU,G,4CAGZ,WACE,IAAQR,EAAWY,KAAKf,MAAhBG,OAER,OACE,sBAAKgB,UAAU,MAAf,UAEE,oBACEA,UAAU,aACV,UAAQ,QAFV,iCAIoBhB,EAAOC,OAJ3B,aAOA,cAAC,EAAD,CACED,OAAQA,EACRK,KAAMO,KAAKf,MAAMQ,KACjBC,UAAWM,KAAKf,MAAMwC,MACtBnC,UAAWU,KAAKf,MAAMK,UACtBK,kBAAmBK,KAAKf,MAAMyC,UAC9B9B,SAAUI,KAAKf,MAAMW,kB,GAxCb0B,IAAMC,WA+CTC,IC1DfG,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.e44d695d.chunk.js","sourcesContent":["import React from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\ntype State = {\n  imagesAmount: number,\n  itemWidth : number,\n  movedDistance: number,\n  gap: number,\n  frameSize: number,\n  step: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nclass Carousel extends React.Component<Props, State> {\n  state = {\n    imagesAmount: this.props.images.length,\n    itemWidth: this.props.itemWidth,\n    movedDistance: 0,\n    gap: 0,\n    step: this.props.step,\n    frameSize: this.props.frameSize,\n    animationDuration: this.props.animationDuration,\n    infinite: this.props.infinite,\n  };\n\n  handleImagesNext = () => {\n    const {\n      imagesAmount,\n      itemWidth,\n      movedDistance,\n      gap,\n      step,\n      infinite,\n    } = this.state;\n\n    if (infinite === true) {\n      this.setState({ movedDistance: 0 });\n    }\n\n    if (movedDistance < ((imagesAmount - step) * (itemWidth + gap))) {\n      const newMovedDistance = movedDistance\n        + (itemWidth + gap) * step;\n      const leftWidth = ((imagesAmount) * (itemWidth + gap))\n      - newMovedDistance;\n\n      switch (leftWidth) {\n        case (itemWidth + gap):\n          this.setState(\n            { movedDistance: movedDistance + itemWidth + gap },\n          );\n          break;\n        case ((itemWidth + gap) * (step - 1)):\n          this.setState(\n            {\n              movedDistance: movedDistance + (itemWidth + gap) * (step - 1),\n            },\n          );\n          break;\n        default:\n          this.setState(\n            {\n              movedDistance: movedDistance + (itemWidth + gap) * step,\n            },\n          );\n      }\n    }\n  };\n\n  handleImagesPrev = () => {\n    const {\n      imagesAmount,\n      itemWidth,\n      movedDistance,\n      gap,\n      step,\n      infinite,\n    } = this.state;\n\n    if (infinite === true) {\n      this.setState({\n        movedDistance: (imagesAmount - step)\n        * (itemWidth + gap),\n      });\n    }\n\n    if (movedDistance >= (itemWidth + gap)) {\n      const newMovedDistance = movedDistance\n      + (itemWidth + gap) * step;\n      const leftWidth = newMovedDistance - ((itemWidth + gap)\n      * step);\n\n      switch (leftWidth) {\n        case itemWidth + gap:\n          this.setState({ movedDistance: movedDistance - itemWidth - gap });\n          break;\n        case ((itemWidth + gap) * (step - 1)):\n          this.setState(\n            {\n              movedDistance: movedDistance - (itemWidth + gap) * (step - 1),\n            },\n          );\n          break;\n        default:\n          this.setState({\n            movedDistance: movedDistance - (itemWidth + gap) * step,\n          });\n      }\n    }\n  };\n\n  render() {\n    const { images } = this.props;\n    const {\n      imagesAmount,\n      itemWidth,\n      movedDistance,\n      gap,\n      step,\n      frameSize,\n      animationDuration,\n      infinite,\n    } = this.state;\n\n    const listStyle = {\n      transform: `translateX(${-movedDistance}px`,\n      transition: `${animationDuration}ms`,\n    };\n\n    return (\n      <div\n        className=\"Carousel\"\n        style={{ width: `${itemWidth * frameSize}px` }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={listStyle}\n        >\n          {images.map((image, index) => {\n            return (\n              <li\n                className=\"Carousel__item\"\n                key={image}\n                style={{ marginRight: `${gap}px` }}\n              >\n                <img\n                  src={image}\n                  alt={`${index + 1}`}\n                  width={`${itemWidth}`}\n                />\n              </li>\n            );\n          })}\n        </ul>\n\n        <div className=\"Carousel__buttons\">\n          <button\n            disabled={movedDistance === 0 && infinite === false}\n            className=\"Carousel__button Carousel__button--prev\"\n            type=\"button\"\n            onClick={this.handleImagesPrev}\n          >\n            Prev\n          </button>\n\n          <button\n            data-cy=\"next\"\n            disabled={movedDistance >= ((imagesAmount - 3)\n              * (itemWidth + gap)) && infinite === false}\n            className=\"Carousel__button Carousel__button--next\"\n            type=\"button\"\n            onClick={this.handleImagesNext}\n          >\n            Next\n          </button>\n        </div>\n\n        <form className=\"Carousel__form\">\n          <label className=\"Carousel__form__label\">\n            {'Moving step: '}\n            <input\n              className=\"Carousel__form__input\"\n              type=\"number\"\n              value={step}\n              min=\"1\"\n              max=\"5\"\n              step=\"1\"\n              onChange={(e) => {\n                this.setState({ step: +e.target.value });\n              }}\n            />\n          </label>\n          <label className=\"Carousel__form__label\">\n            {'Frame size: '}\n            <input\n              className=\"Carousel__form__input\"\n              type=\"number\"\n              value={frameSize}\n              min=\"2\"\n              max=\"5\"\n              step=\"1\"\n              onChange={(e) => {\n                this.setState({ frameSize: +e.target.value });\n              }}\n            />\n          </label>\n          <label className=\"Carousel__form__label\">\n            {'Image size: '}\n            <input\n              className=\"Carousel__form__input\"\n              type=\"number\"\n              value={itemWidth}\n              min=\"50\"\n              max=\"150\"\n              step=\"10\"\n              onChange={(e) => {\n                this.setState({ itemWidth: +e.target.value });\n              }}\n            />\n          </label>\n          <label className=\"Carousel__form__label\">\n            {'Motion speed: '}\n            <input\n              className=\"Carousel__form__input\"\n              type=\"number\"\n              value={animationDuration}\n              min=\"300\"\n              max=\"3000\"\n              step=\"100\"\n              onChange={(e) => {\n                this.setState({ animationDuration: +e.target.value });\n              }}\n            />\n          </label>\n          <label className=\"Carousel__form__label\">\n            {'Infinite: '}\n            <input\n              className=\"Carousel__form__input\"\n              type=\"checkbox\"\n              onClick={() => {\n                if (infinite === false) {\n                  this.setState({ infinite: true });\n                } else {\n                  this.setState({ infinite: false });\n                }\n              }}\n            />\n          </label>\n\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport './components/Carousel.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  itemWidth: number;\n  step: number;\n  frame: number;\n  moveSpeed: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    itemWidth: 130,\n    step: 3,\n    frame: 3,\n    moveSpeed: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const { images } = this.state;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1\n          className=\"App__title\"\n          data-cy=\"title\"\n        >\n          {`Carousel with ${images.length} images`}\n        </h1>\n\n        <Carousel\n          images={images}\n          step={this.state.step}\n          frameSize={this.state.frame}\n          itemWidth={this.state.itemWidth}\n          animationDuration={this.state.moveSpeed}\n          infinite={this.state.infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}